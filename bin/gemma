#!/usr/bin/env ruby
# frozen_string_literal: true
#
# = gemma
#
# Create new gem from template(s).
# Options can be specified on the command line or interactively.
#
# == Usage
#
# gemma new [options]
#
# -h, --help::
#   show this message
#
# -v, --version::
#   print gemma version and exit
#
# --name=name::
#   name of the gem to create; if unspecified, gemma assumes that you want to
#   create the gem interactively, and prompts will be given for any other
#   arguments not specified on the command line.
#
# --dir=name::
#   directory to create the new gem in; default is the name of the gem; specify
#   --dir=. to make the current directory the root of the gem.
#
# --module=name::
#   name of module that contains the gem contents (e.g. MyNewGem for a gem
#   called my_new_gem); by default, this is computed from the gem name.
#
# --template=path::
#   path to template to use instead of default template(s); specify this
#   argument multiple times to copy from several templates (in order).
#

require 'getoptlong'
require 'gemma'
require 'highline'

#
# Process options.
#

getopt = GetoptLong.new(
  ['--help',     '-h', GetoptLong::NO_ARGUMENT],
  ['--version',  '-v', GetoptLong::NO_ARGUMENT],
  ['--name',           GetoptLong::REQUIRED_ARGUMENT],
  ['--dir',            GetoptLong::REQUIRED_ARGUMENT],
  ['--module',         GetoptLong::REQUIRED_ARGUMENT],
  ['--template',       GetoptLong::REQUIRED_ARGUMENT]
)

opts = {}
opts['--template'] = []
getopt.each do |opt, arg|
  case opt
  when '--help' then
    Gemma::Utility.print_usage_from_file_comment __FILE__
    exit
  when '--version' then
    puts "gemma-#{Gemma::VERSION}"
    exit
  when '--template' then
    opts['--template'] << arg
  else
    opts[opt] = arg
  end
end

# Remaining argument should be the command.
command = ARGV.shift
unless command && command == 'new'
  Gemma::Utility.print_usage_from_file_comment __FILE__
  exit
end

#
# Create from template; prompt for any missing info.
#
hl = HighLine.new
gt = Gemma::GemFromTemplate.new

interactive = !opts['--name'] || opts['--name'].empty?

if interactive
  puts
  puts 'creating a new gem with gemma...'
  puts
end

unless interactive
  gt.gem_name = opts['--name']
else
  gt.gem_name = hl.ask('gem name: ') { |q| q.validate = /^.+$/ } # weak
end

if opts['--dir']
  gt.dir_name = opts['--dir']
elsif interactive
  gt.dir_name = hl.ask('create gem in directory: ') do |q|
    q.default = gt.dir_name
  end
end

if opts['--module']
  gt.module_name = opts['--module']
elsif interactive
  gt.module_name = hl.ask('wrap contents in module called: ') do |q|
    q.default = gt.module_name
  end
end

templates = opts['--template']
if templates.empty?
  if interactive
    templates << 'base' << 'minitest'
    hl.choose do |menu|
      menu.prompt = 'type of gem: '
      menu.shell = true
      menu.choice('library (library scripts only)') do
        # no extras
      end
      menu.choice('program (both library scripts and executable scripts)') do
        templates << 'executable'
      end
    end
  else
    templates.push(*Gemma::GemFromTemplate::BUILTIN_TEMPLATES)
  end
  templates.map! do |name|
    File.join(Gemma::GemFromTemplate::TEMPLATE_ROOT, name)
  end
end

puts "creating gem in #{gt.destination_path}"
gt.create_gem(templates)
puts 'gem created; to get started, see the following TODO tags:'
Gemma::Utility.rgrep(/TODO/, gt.destination_path)
